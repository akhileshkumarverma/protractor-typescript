var gulp = require("gulp");
var ts = require("gulp-typescript");
var tsProject = ts.createProject("./tsconfig.json");
var extensionReplace = require("gulp-ext-replace");
var gulpProtractor = require("gulp-protractor").protractor;
var gulpSequence = require('gulp-sequence');
var del = require("del");

/*
 * author : sudharsan selvaraj
 * created on : 28/10/2017
 */


/*
 * parse the command line arguments and construct an JSON object out of it.
 *
 * Later the same object can be used to control the task based on the arguments.
 */


const args = (function (argList) {
	var parsedArgument = {}, currentArgument, opt, curOpt;
	argList.forEach(function (argument) {
		currentArgument = argument.trim();
		opt = currentArgument.replace(/^\-+/, '');
		if (currentArgument == opt) {
			if (curOpt) parsedArgument[curOpt] = opt;
			curOpt = null;
		} else {
			curOpt = opt;
			parsedArgument[curOpt] = true;

		}
	});
	return parsedArgument;
})(process.argv);


gulp.task("clean", function () {
	return del(['**/*.pid','./built/**/*.*']);

});

/*
 * Below gulp task will transpile all typescript file present under `src` directory to `built` directory.
 */

gulp.task("build", function () {

	var tsResult = tsProject.src() // or tsProject.src()
		.pipe(tsProject());

	return tsResult.on('error', function () {
			process.exit(1)
		})
		.js.pipe(gulp.dest("built"))

});

/*
 * During transpiling process, typrscript complier will compile only file wits extension `.ts`.
 * All other files will not be moved to `built` folder.
 * Below task will recurrsively moves all files under `src` (excludes files with extension `.ts`) to `built` directory.
 */

gulp.task("moveAssests", function () {
	return gulp.src(['!src/**/*.ts','src/**/*.*'],{base:"src"})
		.pipe(gulp.dest('built'))
		.on('error', function () {
			process.exit(1)
		});
});


gulp.task("run", function () {

	var getParametersForProtractor = function () {
		var paramsObject = args, paramsArray = [];
		if (args.hasOwnProperty("suite") && args.hasOwnProperty("params.parallel") && args["params.parallel"] == "yes") {
			delete paramsObject.suite;
		}
		Object.keys(paramsObject).forEach(function (param) {
			paramsArray.push("--" + (param));
			paramsArray.push(paramsObject[param]);
		});

		return paramsArray;
	};

	return gulp.src([])
		.pipe(gulpProtractor({
			configFile: "./built/config/protractor.config.js",
			args      : getParametersForProtractor()
		}));

});


/*
 * Html report generated by `protractor-beautiful-reporter` contains files with extension `.js`.
 *
 * Gmail will block email attachments that conatins any files with extension `.js`.
 * Below task will renames extensions all `.js` to `.json` before email is sent.
 */


gulp.task("renameJsInResult", function () {

	gulp.src('results/**/*.js', {base: './results'})
		.pipe(extensionReplace('.json'))
		.pipe(gulp.dest('results'))

});

gulp.task("replaceJsExtension", ['renameJsInResult'], function () {
	return del('results/**/*.js');
});

/*
 * Default gulp task will clean src folder , transpile all ts files and move assests to respective built folder and run protractor test.
 */

gulp.task('default', gulpSequence('clean', 'build', 'moveAssests', 'run'));